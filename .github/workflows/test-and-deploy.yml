name: Run Playwright Tests and Deploy Report

# Required Secrets for full functionality:
# - USER_NAME: Test user email for SmartClaim login
# - PASSWORD: Test user password for SmartClaim login
# - TELEGRAM_TOKEN: Bot token from @BotFather on Telegram (optional)
# - TELEGRAM_CHAT_ID: Chat ID where notifications should be sent (optional)
# - BASE_URL: Target environment URL (optional, defaults to dev2.smartclaim.uk)

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # Allow manual triggering

permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.13'

    - name: Install uv
      uses: astral-sh/setup-uv@v3

    - name: Install dependencies
      run: uv sync

    - name: Install Playwright browsers
      run: uv run playwright install --with-deps chromium

    - name: Create screenshots directory
      run: mkdir -p screenshots

    - name: Add test files
      run: |
        # Create a proper test document that should process faster
        cat > test-document.txt << 'EOF'
        Test Document for SmartClaim Processing
        
        This is a simple test document containing minimal text content that should process quickly in the SmartClaim system.
        
        Key Information:
        - Document Type: Test Document
        - Content: Minimal text for fast processing
        - Purpose: Automated testing
        
        This document contains enough text to trigger processing but is small enough to process quickly.
        EOF
        
        # Convert to PDF using available tools or use as text file
        cp test-document.txt output.pdf
        
        # Also create the original test file as backup
        echo "SmartClaim Test Document - Simple content for automated testing." > Martian\ Transcript\ copy.docx

    - name: Run Playwright tests
      id: test_run
      env:
        BASE_URL: ${{ secrets.BASE_URL  }}
        USER_NAME: ${{ secrets.USER_NAME }}
        PASSWORD: ${{ secrets.PASSWORD }}
      run: |
        if uv run python -m pytest tests/run.py -v -s --browser=chromium --screenshot=on --html=report.html --self-contained-html --video=on; then
          echo "test_status=success" >> $GITHUB_OUTPUT
        else
          echo "test_status=failure" >> $GITHUB_OUTPUT
        fi
      continue-on-error: true  # Continue even if tests fail to deploy the report
    
    - name: Send Telegram notification on success
      if: steps.test_run.outputs.test_status == 'success'
      env:
        TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
      run: |
        if [ -n "$TELEGRAM_TOKEN" ] && [ -n "$TELEGRAM_CHAT_ID" ]; then
          # Extract owner and repo name for Pages URL
          REPO_OWNER="${{ github.repository_owner }}"
          REPO_NAME=$(echo "${{ github.repository }}" | cut -d'/' -f2)
          PAGES_URL="https://${REPO_OWNER}.github.io/${REPO_NAME}/"
          
          MESSAGE="✅ SmartClaim tests passed successfully!%0A%0A"
          MESSAGE="${MESSAGE}📋 Repository: ${{ github.repository }}%0A"
          MESSAGE="${MESSAGE}🔀 Branch: ${{ github.ref_name }}%0A"
          MESSAGE="${MESSAGE}👤 Actor: ${{ github.actor }}%0A"
          MESSAGE="${MESSAGE}📝 Commit: ${{ github.sha }}%0A"
          MESSAGE="${MESSAGE}📊 Report: ${PAGES_URL}%0A"
          MESSAGE="${MESSAGE}🔗 Workflow: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          
          curl -s -X POST "https://api.telegram.org/bot${TELEGRAM_TOKEN}/sendMessage" \
            -d "chat_id=${TELEGRAM_CHAT_ID}" \
            -d "text=${MESSAGE}" \
            -d "parse_mode=HTML" \
            -d "disable_web_page_preview=true" || echo "Failed to send Telegram notification"
        else
          echo "Telegram credentials not configured, skipping notification"
        fi

    - name: Fix media links in HTML report
      run: python .github/workflows/fix-html-media.py
      continue-on-error: true

    - name: Setup Pages
      uses: actions/configure-pages@v4

    - name: Download existing Pages artifact (for history)
      uses: actions/download-artifact@v4
      with:
        name: github-pages
        path: existing-site/
      continue-on-error: true

    - name: Extract existing history
      run: |
        mkdir -p _site
        # Try to extract history from existing deployment
        if [ -d "existing-site" ]; then
          cd existing-site
          if [ -f "artifact.tar" ]; then
            tar -tf artifact.tar | head -10
            tar -xf artifact.tar report-history.json 2>/dev/null || echo "No history found"
            if [ -f "report-history.json" ]; then
              cp report-history.json ../_site/report-history.json
              echo "Existing report history found and restored"
            fi
          fi
          cd ..
        fi

    - name: Create Pages structure
      run: |
        # Copy test report as the main report
        cp report.html _site/report.html 2>/dev/null || echo "No report.html found"
        
        # Copy artifacts with better error handling
        if [ -d "screenshots" ]; then
          cp -r screenshots _site/screenshots
          echo "Screenshots copied successfully"
          ls -la _site/screenshots/
        else
          mkdir -p _site/screenshots
          echo "No screenshots directory found, created empty one"
        fi
        
        if [ -d "test-results" ]; then
          cp -r test-results _site/test-results
          echo "Test results copied successfully"
          find _site/test-results -name "*.webm" -exec ls -la {} \;
        else
          echo "No test-results directory found"
        fi
        
        if [ -d "playwright-report" ]; then
          cp -r playwright-report _site/playwright-report
          echo "Playwright report copied successfully"
        else
          echo "No playwright-report directory found"
        fi
        
        # Create index page with history
        python .github/workflows/create-index.py

    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: '_site'

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4